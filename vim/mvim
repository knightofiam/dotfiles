#!/bin/sh
#
# This shell script passes all its arguments to the binary inside the
# MacVim.app application bundle.  If you make links to this script as view,
# gvim, etc., then it will peek at the name used to call it and set options
# appropriately.
#
# Based on a script by Wout Mertens and suggestions from Laurent Bihanic.  The
# early versions were not under version control. The last few versions before
# the git history are the work of Benji Fisher (16 May 2005) and Nico Weber and
# Bjorn Winckler (Aug 13 2007).

# https://stackoverflow.com/a/9100989/14410393
tabs=true

# Find Vim executable
orig_path="$(pwd -P)"
self_path="$0"
while [ -L "$self_path" ]; do  # dereference links
	link="$(basename "$self_path")"
	cd "$(dirname "$self_path")"
	self_path="$(readlink "$link")"
done
cd "$(dirname "$self_path")"
binary="$(dirname "$(pwd -P)")/MacOS/Vim"
cd "$orig_path"

if ! [ -x "$binary" ]; then
	echo "Sorry, cannot find Vim executable."
	exit 1
fi

# Next, peek at the name used to invoke this script, and set options
# accordingly.

name="`basename "$0"`"
gui=
opts=

# GUI mode, implies forking
case "$name" in m*|g*|rm*|rg*) gui=true ;; esac

# Logged in over SSH? No gui.
if [ -n "${SSH_CONNECTION}" ]; then
	gui=
fi

# Restricted mode
case "$name" in r*) opts="$opts -Z";; esac

# vimdiff, view, and ex mode
case "$name" in
	*vimdiff)
		opts="$opts -dO"
		;;
	*view)
		opts="$opts -R"
		;;
	*ex)
		opts="$opts -e"
		;;
esac

# https://stackoverflow.com/a/9100989/14410393
# Last step:  fire up vim.
if [ "$gui" ]; then
  if $tabs && [[ `$binary --serverlist` = "VIM" ]]; then
    exec "$binary" -g $opts --remote-tab-silent ${1:+"$@"}
  else
    exec "$binary" -g $opts ${1:+"$@"}
  fi
else
  exec "$binary" $opts ${1:+"$@"}
fi
